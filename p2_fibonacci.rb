# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

require 'rspec'

class Fibonacci

	def even_values(num)
		(num % 2).zero?
	end

	def sum_array(array)
		array.inject(:+)

	end

	def get_sequence

		f_array = []

		for num in 1..1000
			if (even_values(num) == true)
				f_array.push(num)
			end
		end
		sum_array(f_array)

	end


end

describe 'Fibonacci sequence' do

	# before(:all)
	# before(:each) do
	# end
	

	it 'should return values in the sequence' do

	end

	it 'should return even values' do
		num = 6

		f_calc = Fibonacci.new
		even_number = f_calc.even_values(num)

		expect(even_number).to be true	
	end

	it 'should return the sum of an array' do
		array = [1,2,3,5]

		f_calc = Fibonacci.new
		result = f_calc.sum_array(array)

		expect(result).to eq(11)
	end

	it 'should return the sum of the even numbers in the array' do
		f_calc = Fibonacci.new
		f_sequence_sum = f_calc.get_sequence
		expect(f_sequence_sum).to eq(2)
	end


end